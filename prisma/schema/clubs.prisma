model Club {
  id             String    @id @default(ulid())
  name           String
  location       String?
  latitude       Float?
  longitude      Float?
  description    String?
  dateFounded    DateTime?
  slug           String?   @unique
  isAllied       Boolean   @default(false)
  isPrivate      Boolean   @default(false)
  isPrivateStats Boolean   @default(false)
  logo           String?
  contactPhone   String?
  contactEmail   String?
  verified       Boolean   @default(false)
  website        String?

  // Instagram integration fields
  instagramUsername          String?
  instagramProfilePictureUrl String?
  instagramAccessToken       String?
  instagramTokenExpiry       DateTime?
  instagramRefreshToken      String?
  instagramConnected         Boolean   @default(false)
  instagramBusinessId        String? // Instagram Business Account ID
  facebookPageId             String? // Connected Facebook Page ID
  instagramTokenType         String? // Type of token (e.g., "PERMANENT", "TEMPORARY")

  events      Event[]
  rules       ClubRule[]
  members     ClubMembership[]
  invitesSent ClubInvite[]
  reviews     Review[]
  purchases   ClubPurchase[]
  posts       Post[]
  country     Country?         @relation(fields: [countryId], references: [id])
  countryId   Int?

  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ClubAuditLog ClubAuditLog[]

  @@index([id, slug])
}

model ClubPurchase {
  id          String   @id @default(cuid())
  title       String
  description String?
  club        Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  clubId      String
  receiptUrls String[]
  amount      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model ClubRule {
  id          String   @id @default(cuid())
  name        String
  description String?
  content     String
  club        Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  clubId      String
  Event       Event?   @relation(fields: [eventId], references: [id])
  eventId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model ClubMembership {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  club      Club      @relation(fields: [clubId], references: [id], onDelete: Cascade)
  clubId    String
  role      Role      @default(USER)
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  @@unique([userId, clubId])
}

model ClubInvite {
  id         String       @id @default(cuid())
  email      String
  club       Club         @relation(fields: [clubId], references: [id], onDelete: Cascade)
  clubId     String
  user       User?        @relation(fields: [userId], references: [id])
  userId     String?
  status     InviteStatus @default(PENDING)
  inviteCode String       @unique
  expiresAt  DateTime
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())

  @@index([email])
  @@index([status])
  @@index([inviteCode])
  @@index([clubId])
  @@index([userId])
}

// Temporary storage for Instagram page selection process
model InstagramPageSelection {
  id          String   @id @default(cuid())
  clubId      String
  accessToken String   @db.Text
  pages       String   @db.Text // JSON string of pages
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  @@index([clubId])
}
